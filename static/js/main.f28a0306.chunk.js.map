{"version":3,"sources":["components/Home.jsx","components/List.jsx","components/Add.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","totalExpenses","numberOfItems","className","List","props","this","expenses","handleDeleteItemButtonClick","length","map","item","key","id","Component","TableRow","price","onClick","Add","handleItemValueChange","handlePriceValueChange","handleSaveButtonClick","htmlFor","type","value","onChange","e","App","state","target","setState","parseInt","preventDefault","newExpense","push","filter","singleExpense","to","data-toggle","data-target","aria-controls","aria-expanded","aria-label","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f28a0306.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\n\nconst Home = ({ totalExpenses, numberOfItems }) => {\n    return (\n        <Fragment>\n            <h1 className=\"pt-5 text-center\">Expenses Calculator</h1>\n            <h3 className=\"pt-5 text-center\">Your total expenses are {totalExpenses} EGP</h3>\n            <h3 className=\"pt-5 text-center\">You have {numberOfItems} items in your expenses list</h3>\n        </Fragment>\n    );\n}\n\nexport default Home;","import React, { Component, Fragment } from 'react';\n\nexport default class List extends Component {\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        const { expenses, handleDeleteItemButtonClick } = this.props\n\n        if (expenses.length > 0) {\n            return (\n                <Fragment>\n                    <h1 className=\"pt-5 text-center\">Expenses List</h1>\n                    <hr />\n                    <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th>#</th>\n                                <th>Item</th>\n                                <th>Price</th>\n                                <th>Actions</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {expenses.map(item => <TableRow key={item.id} \n                                                            item={item}\n                                                            handleDeleteItemButtonClick={handleDeleteItemButtonClick} />)}\n                        </tbody>\n                    </table>\n                </Fragment>\n            )\n        } else {\n            return (\n                <h1 className=\"pt-5 text-center\">You haven't added any expenses yet</h1>\n            )\n        }\n    }\n}\n\nconst TableRow = ({ item, handleDeleteItemButtonClick }) => {\n    return (\n        <tr>\n            <td>{item.id}</td>\n            <td>{item.item}</td>\n            <td>{item.price}</td>\n            <td>\n                <button className=\"btn btn-danger\" onClick={() => handleDeleteItemButtonClick(item)}>Delete</button>\n            </td>\n        </tr>\n    )\n}","import React, { Fragment } from 'react';\n\nconst Add = ({ item, price, handleItemValueChange, handlePriceValueChange, handleSaveButtonClick }) => {\n    return (\n        <Fragment>\n            <h1 className=\"pt-5 text-center\">Add a new Item</h1>\n            <form>\n                <div className=\"form-group\">\n                    <label htmlFor=\"item\">Item</label>\n                    <input type=\"text\" id=\"item\" value={item} className=\"form-control\" onChange={(e) => handleItemValueChange(e)}/>\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"price\">Price</label>\n                    <input type=\"number\" id=\"price\" value={price} className=\"form-control\" onChange={(e) => handlePriceValueChange(e)}/>\n                </div>\n                <button className=\"btn btn-success\" onClick={(e) => handleSaveButtonClick(e)}>Add Item</button>\n            </form>\n        </Fragment>\n    )\n}\n\nexport default Add;","import React, {Component} from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport { BrowserRouter, Link, NavLink, Switch, Route } from 'react-router-dom'\nimport Home from './components/Home';\nimport List from './components/List';\nimport Add from './components/Add';\n\nexport default class App extends Component {\n  \n  state = {\n    expenses : [],\n    id: 0,\n    item : '',\n    price : 0,\n    totalExpenses : 0,\n    numberOfItems : 0,\n  }\n\n  handleItemValueChange = (e) => {\n    const item = e.target.value;\n    this.setState({ item });\n  }\n\n  handlePriceValueChange = (e) => {\n    const price = parseInt(e.target.value);\n    this.setState({ price });\n  }\n\n  handleSaveButtonClick = (e) => {\n    e.preventDefault();\n    const newExpense = {\n      id : this.state.id + 1,\n      item : this.state.item,\n      price: this.state.price\n    }\n\n    let totalExpenses = this.state.totalExpenses;\n    let numberOfItems = this.state.numberOfItems;\n    totalExpenses += this.state.price;\n    numberOfItems++;\n\n    let item = '';\n    let price = '';\n    let id = this.state.id + 1;\n    let expenses = this.state.expenses;\n    expenses.push(newExpense);\n\n    this.setState({ expenses, id, item, price, totalExpenses, numberOfItems });\n\n  }\n\n  handleDeleteItemButtonClick = (item) => {\n    let totalExpenses = this.state.totalExpenses;\n    let numberOfItems = this.state.numberOfItems;\n    \n    totalExpenses -= item.price;\n    numberOfItems--;\n\n    let expenses = this.state.expenses.filter(singleExpense => item != singleExpense)\n\n    this.setState({ totalExpenses, numberOfItems, expenses });\n  }\n\n  render (){\n    return (\n      <BrowserRouter>\n      <nav className=\"navbar navbar-expand navbar-dark bg-dark\">\n        <NavLink to=\"/\" className=\"navbar-brand\">Expenses</NavLink>\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n          <span className=\"navbar-toggler-icon\"></span>\n        </button>\n        <div className=\"navbar-collapse collapse\" id=\"navbarNavDropdown\">\n          <ul className=\"navbar-nav mr-auto\">\n            <li className=\"nav-item\">\n              <NavLink className=\"nav-link\" to=\"/list\">List</NavLink>\n            </li>\n            <li>\n              <NavLink className=\"nav-link\" to=\"/add\">Add New</NavLink>\n            </li>\n          </ul>\n        </div>\n      </nav>\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <Home totalExpenses={this.state.totalExpenses} numberOfItems={this.state.numberOfItems} />\n          </Route>\n          <Route exact path=\"/list\">\n            <List expenses={this.state.expenses}\n                  handleDeleteItemButtonClick={this.handleDeleteItemButtonClick} />\n          </Route>\n          <Route exact path=\"/add\">\n            <Add item={this.state.item} \n                price={this.state.price} \n                handleItemValueChange={this.handleItemValueChange} \n                handlePriceValueChange={this.handlePriceValueChange} \n                handleSaveButtonClick={this.handleSaveButtonClick}\n                />\n          </Route>\n        </Switch>\n      </div>\n      </BrowserRouter>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}